<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Face_Dinkel</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
hpMax = 10;
hp = hpMax;
image_speed = 0;

path = pat_D11_Dinkel1;
pathPos = 0;
moveSpeed = 6;
chargeTime = room_speed * 1.5;
moveTimeMin = room_speed * 2;
moveTimeMax = room_speed * 3;
booted = false;
copyA0 = -1;
copyA1 = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take damage
hp -= 1;
if (hp &lt;= 4) {
    path = pat_D11_Dinkel3;
    moveSpeed = 10;
    chargeTime = room_speed * 1;
    moveTimeMin = room_speed * 0.5;
    moveTimeMax = room_speed * 1.5;
}
else if (hp &lt;= 7) {
    path = pat_D11_Dinkel2;
    moveSpeed = 8;
    chargeTime = room_speed * 1.25;
    moveTimeMin = room_speed * 1;
    moveTimeMax = room_speed * 2;
}

if (!D11_Kristian.gameDone &amp;&amp; hp &lt;= 0) {
    D11_Kristian.gameDone = true;
    dialog_show("Win");
    instance_deactivate_object(D11_Beam);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wait for angry intro
if (Dialog.active) {
    alarm[2] = 1;
}
else {
    with (D11_Kristian) {
        if (event == "Wait") {
            event = "Dinkel Murder";
            dialog_show("Dinkel: Angry");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop path
pathPos = path_position;
path_end();

//Fire beam
var beam = instance_create(x, y, D11_Beam);
beam.image_angle = image_angle;
beam.alarm[0] = chargeTime;

//Wait until fired
image_index = 1;
alarm[0] = chargeTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wait for charge

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving
if (Dialog.active) {
    alarm[0] = 1;
}
else {
    //Start path
    image_index = 0;
    path_start(path, moveSpeed, path_action_continue, true);
    path_position = pathPos;
    alarm[1] = random_int(moveTimeMin, moveTimeMax);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Look at player
if (!alarm[0]) {
    image_angle = point_direction(x, y, D11_Kristian.x, D11_Kristian.y);
}

if (booted &amp;&amp; path_index) {
    if (Dialog.active) {
        if (alarm[0] || alarm[1]) {
            path_speed = 0;
            copyA0 = alarm[0];
            copyA1 = alarm[1];
            alarm[0] = 0;
            alarm[1] = 0;
        }
    }
    else {
        if (path_speed == 0) {
            path_speed = moveSpeed;
            alarm[0] = copyA0;
            alarm[1] = copyA1;
        }
    }
}

if (Dialog.active &amp;&amp; booted) {
    if (path_index &gt;= 0 ) {
        path_speed = 0;

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dinkel in picture
alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw hp
if (hpMax &gt; 0 &amp;&amp; hp &lt; hpMax &amp;&amp; hp &gt; 0) {
    //Draw hp frame
    var hpw = 64;
    var hpx1 = x - (hpw / 2);
    var hpy1 = y - 64;
    var hpy2 = hpy1 + 8;
    draw_set_colour(c_white);
    draw_rectangle(hpx1, hpy1, hpx1 + hpw, hpy2, false);
    
    //Draw hp progress
    var progress = hp / hpMax;
    draw_set_colour(c_red);
    draw_rectangle(hpx1, hpy1, hpx1 + (hpw * progress), hpy2, false);
    
    //Draw hp text
    draw_set_font(fnt_Arial_Small);
    draw_set_colour(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(x, hpy1 - 16, string(hp) + " / " + string(hpMax));
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self and charge
var col = c_white;
if (hp &lt;= 0) { col = c_gray; }
draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, image_angle, col, 1);

if (alarm[0] &gt; 0) {
    //Draw beam
    var r = 128 * (alarm[0] / chargeTime);
    draw_set_colour(c_red);
    draw_circle(x, y, r, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
