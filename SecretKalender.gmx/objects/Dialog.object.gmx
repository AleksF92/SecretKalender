<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Dialog</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

//To be initialized by instance
avatar = spr_Dialog;
texts = ds_list_create();
emotions = ds_list_create();
autoPlayNext = ds_list_create();

//Work variables
currentId = -1;
text = "";
targetText = "";
active = false;

//Help variables
width = sprite_width * 4;
bottom = y + sprite_height;
x -= (width / 2);
frameR = x + (sprite_width * 3);

textDelay = room_speed / 30;
TEXT_OFFSET = 8;
textX = x + TEXT_OFFSET;
textY = y + TEXT_OFFSET;
textMaxLength = (sprite_width * 3) - (TEXT_OFFSET * 2);
textLineSpace = TEXT_OFFSET * 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Build text from target text
if (text != texts[| currentId]) {
    var nextChar = string_char_at(targetText, 0);
    targetText = string_replace(targetText, nextChar, "");
    text += nextChar;
    alarm[1] = textDelay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trigger next dialog
if (currentId + 1 &lt; ds_list_size(texts)) {
    currentId++;
    text = "";
    targetText = texts[| currentId];
    alarm[1] = textDelay;
}
else {
    //Last dialog, end day
    room_goto(rom_Calendar);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle events
if (keyboard_check_pressed(vk_space)) {
    if (active) {
        if (text != texts[| currentId]) {
            //Skip writing
            text = texts[| currentId];
            targetText = "";
            alarm[1] = 0;
        }
        else {
            //Proceed dialog
            if (autoPlayNext[| currentId]) {
                //Trigger next
                alarm[0] = 1;
            }
            else {
                //End dialog
                active = false;
            }
        }
    }
}

if (keyboard_check_pressed(vk_return)) {
    active = true;
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw dialog
if (active &amp;&amp; currentId &gt;= 0) {
    //Draw main frame
    draw_set_colour(c_white);
    draw_rectangle(x, y, frameR, bottom, false);
    
    //Draw text
    draw_set_font(fnt_Arial_Small);
    draw_set_colour(c_black);
    draw_text_ext(textX, textY, text, textLineSpace, textMaxLength);
    
    //Draw emotion
    draw_sprite(avatar, emotions[| currentId], frameR, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
