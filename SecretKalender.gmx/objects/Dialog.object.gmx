<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Dialog</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
x = (window_get_width() / 2) - (sprite_width / 2);
y = window_get_height() - sprite_height - 32;

//To be initialized by instance
texts = ds_list_create();
emotions = ds_list_create();
autoPlayNext = ds_list_create();
avatars = ds_list_create();
parts = ds_map_create();

//Work variables
currentId = -1;
text = "";
targetText = "";
active = false;
waitForInput = false;
resumeDialog = false;
inputLock = false;

//Help variables
width = sprite_width * 4;
bottom = y + sprite_height;
x -= ((width / 2) - (sprite_width / 2));
frameR = x + (sprite_width * 3);

textDelay = room_speed / 30;
TEXT_OFFSET = 8;
textX = x + TEXT_OFFSET;
textY = y + TEXT_OFFSET;
textMaxLength = (sprite_width * 3) - (TEXT_OFFSET * 2);
textLineSpace = (TEXT_OFFSET * 2) + TEXT_OFFSET;

inputW = 512;
inputH = 64;
inputX = (window_get_width() / 2) - (inputW / 2);
inputY = (window_get_height() / 2) - (inputH / 2);
inputMarker = "";
inputText = "";
prizeText = "&lt;Premie mangler&gt;";

//Check if day room or calendar
if (room &gt; rom_Calendar || !Game.introPlayed) {
    if (room == rom_Calendar) { Game.introPlayed = true; } //Play once

    //Auto activate first
    active = true;
    alarm[0] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle input marker
if (waitForInput) {
    if (inputMarker == "") {
        inputMarker = "|";
    }
    else {
        inputMarker = "";
    }
    
    alarm[2] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Build text from target text
if (text != texts[| currentId]) {
    var nextChar = string_char_at(targetText, 0);
    targetText = string_replace(targetText, nextChar, "");
    text += nextChar;
    alarm[1] = textDelay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trigger next dialog
if (currentId + 1 &lt; ds_list_size(texts)) {
    currentId++;
    text = "";
    targetText = texts[| currentId];
    alarm[1] = textDelay;
    
    //Check if input is required
    if (string_contains(targetText, "Premie")) {
        //waitForInput = true;
        //keyboard_string = "";
        //alarm[2] = 1;
        if (current_day != (room - rom_Calendar)) {
            active = false;
            room_goto(rom_Calendar);
        }
    }
}
else {
    //Last dialog, end day
    room_goto(rom_Calendar);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle events
if (active &amp;&amp; !alarm[0] &amp;&amp; !waitForInput &amp;&amp; !inputLock) {
    var deactivate = false;
    if (keyboard_check_pressed(vk_space) || resumeDialog) {
        resumeDialog = false;
        if (text != texts[| currentId]) {
            //Skip writing
            text = texts[| currentId];
            targetText = "";
            alarm[1] = 0;
        }
        else {
            //Proceed dialog
            if (autoPlayNext[| currentId]) {
                //Trigger next
                alarm[0] = 1;
            }
            else {
                //Trigger end dialog
                deactivate = true;
            }
        }
    }
    
    if (keyboard_check_pressed(vk_return)) {
        //Find first end
        var atId = currentId;
        for (var i = currentId; i &lt; ds_list_size(texts); i++) {
            currentId = i;
            if (!autoPlayNext[| i]) { break; }
        }
        
        //Check if input requirement
        if (string_contains(texts[| currentId], "Premie") &amp;&amp; atId != currentId) {
            currentId--;
            alarm[0] = 1;
        }
        else {
            //Trigger end dialog
            deactivate = true;
        }
    }
    
    //Dialog end events
    if (deactivate) {
        //End dialog
        deactivate = false;
        active = false;
        
        if (room == rom_D1_Stigespill) {
            //Move cards down
            with (D1_Card) {
                y = room_height - sprite_height - (D1_Stigespill.gridSize / 2);
            }
        }
        else if (room == rom_D2_DemonChase) {
            //Start spawning demons and wrapping presents
            D2_DemonChase.alarm[0] = room_speed;
            D2_Aleks.alarm[0] = D2_Aleks.presentDelay;
        }
        else if (room == rom_D4_CallOfLarsen) {
            //Start spawning
            D4_CallOfLarsen.alarm[2] = room_speed;
        }
    }
}
else if (waitForInput) {
    //Dont allow spaces
    keyboard_string = string_replace_all(keyboard_string, " ", "");
    
    //Check for manual special char override
    if (keyboard_check_pressed(ord("2"))) {
        if (keyboard_check(vk_alt)) {
            //Manual @
            var lastChar = string_length(keyboard_string);
            keyboard_string = string_delete(keyboard_string, lastChar, 1);
            keyboard_string += "@";
        }
    }
    
    //Check for overflow characters
    inputText = keyboard_string;
    var maxLetters = 40;
    var overflow = string_length(inputText) - maxLetters;
    if (overflow &gt; 0) {
        //Hide overflow
        inputText = string_copy(inputText, overflow, maxLetters);
    }
    inputText += inputMarker;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw dialog
if (active &amp;&amp; currentId &gt;= 0) {
    //Draw main frame
    draw_set_colour(c_white);
    draw_rectangle(x, y, frameR, bottom, false);
    
    //Draw name
    draw_set_font(fnt_Arial_Small);
    draw_set_colour(c_green);
    var name = "";
    if (avatars[| currentId] == spr_Aleks) { name = "Aleksander"; }
    else if (avatars[| currentId] == spr_Stig) { name = "Stig"; }
    else if (avatars[| currentId] == spr_Kristian) { name = "Kristian"; }
    else if (avatars[| currentId] == spr_Larsen) { name = "Larsen"; }
    else if (avatars[| currentId] == spr_Dinkel) { name = "Dinkel-Bot"; }
    draw_text_ext(textX, textY, name, textLineSpace, textMaxLength);
    
    //Draw text
    draw_set_colour(c_black);
    draw_text_ext(textX, textY + textLineSpace, text, textLineSpace, textMaxLength);
    
    //Draw emotion
    draw_sprite(avatars[| currentId], emotions[| currentId], frameR, y);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw input field
if (waitForInput) {
    var w = 64 * 6;
    var h = 110;
    var x1 = (window_get_width() / 2) - (w / 2);
    var x2 = x1 + w;
    var y1 = (window_get_height() / 2) - (h / 2);
    var y2 = y1 + h;
    
    //Calculate title text &amp; frame
    var titleText = "Påmeldelse til konkurranse";
    draw_set_font(fnt_Arial_Medium);
    var tfh = string_height(titleText);
    var tfx = window_get_width() / 2;
    var tfy = y1 - (tfh + 16);
    
    //Draw frame
    draw_set_color(c_maroon);
    draw_rectangle(x1, tfy, x2, y1, false);
    
    //Draw text
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(tfx, tfy + 4, titleText);
    draw_set_halign(fa_left);
    
        
        
    //Draw input frame
    draw_set_colour(c_white);
    draw_rectangle(x1, y1, x2, y2, false);
    
    //Draw field info
    draw_set_font(fnt_Arial_Small);
    draw_set_colour(c_black);
    draw_text(x1 + 4, y1 + 4, "Din epost: ");
    
    //Draw input text framing
    var textH = string_height(" ") + 8;
    var txtY = y1 + textH;
    var txtB = txtY + textH;
    var txtC = txtY + (textH / 2);
    draw_rectangle(x1 + 4, txtY, x2 - 4, txtB, true);
    
    //Draw input text
    draw_set_valign(fa_middle);
    draw_set_color(c_blue);
    draw_text(x1 + 8, txtC, inputText);
    draw_set_valign(fa_top);
    
    
    
    //Draw cancel button
    var btnW = (w / 2) - 8;
    var btnH = (textH * 1.5);
    var btn1x = x1 + 4;
    var btn1r = btn1x + btnW;
    var btnY = y2 - btnH - 4;
    var btnB = btnY + btnH;
    draw_set_color(c_red);
    draw_rectangle(btn1x, btnY, btn1r, btnB, false);
    
    //Draw cancel text
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(btn1x + (btnW / 2), btnY + (btnH / 2), "Avbryt");
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    //Check mouse hover
    if (mouse_y &gt;= btnY &amp;&amp; mouse_y &lt;= btnB) {
        if (mouse_x &gt;= btn1x &amp;&amp; mouse_x &lt;= btn1r) {
            draw_set_color(c_white);
            draw_set_alpha(0.5);
            draw_rectangle(btn1x, btnY, btn1r, btnB, false);
            draw_set_alpha(1);
            if (mouse_check_button_pressed(mb_left)) {
                //Clicked cancel
                waitForInput = false;
                resumeDialog = true;
            }
        }
    }
    
    //Draw accept button
    var btn2x = tfx + 4;
    var btn2r = btn2x + btnW;
    draw_set_color(c_green);
    draw_rectangle(btn2x, btnY, btn2r, btnB, false);
    
    //Draw cancel text
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(btn2x + (btnW / 2), btnY + (btnH / 2), "Ja takk");
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    //Check mouse hover
    if (mouse_y &gt;= btnY &amp;&amp; mouse_y &lt;= btnB) {
        if (mouse_x &gt;= btn2x &amp;&amp; mouse_x &lt;= btn2r) {
            draw_set_color(c_white);
            draw_set_alpha(0.5);
            draw_rectangle(btn2x, btnY, btn2r, btnB, false);
            draw_set_alpha(1);
            if (mouse_check_button_pressed(mb_left)) {
                //Check if valid email
                var emailStr = keyboard_string;
                var req1 = string_index(emailStr, "@");
                var req2 = string_index(string_after(emailStr, req1), ".");
                if (req1 &gt; -1 &amp;&amp; req2 &gt; -1) {
                    //Store name
                    var dayNum = room - rom_Calendar;
                    email_save(dayNum, emailStr);
                    
                    //Clicked accept
                    waitForInput = false;
                    resumeDialog = true;
                }
                else {
                    show_message("Vennligst skriv inn en gyldig epost.#Eksempel: eksempel@secretchest.no");
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DON'T draw self
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
