<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Face_Kristian</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
gameDone = false;
doodles = 0;
energyMax = 25;
energy = 25;
winCount = 500;

pulling = false;
speedX = 0;
speedY = 0;
hw = (sprite_width / 2) * 0.1;
hh = (sprite_height / 2) * 0.1;

//Spawn doodles
for (var i = 0; i &lt; 7; i++) {
    scr_D7_SpawnDoodleBatch();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
var fric = 0.05;
var frc = 0.05;
if (speedX != 0) {
    //Apply movement
    x += speedX * frc;
    speedX = lerp(speedX, 0, fric);
    
    //Check for walls
    var dir = sign(speedX);
    var xx = x + (hw * dir);
    var y1 = y - hh;
    var y2 = y + hh;
    var wall = collision_line(xx, y1, xx, y2, D7_Wall, false, false);
    if (wall) {
        //Bounce off wall
        var wallHW = wall.sprite_width / 2;
        var wallX = wall.x + wallHW + (wallHW * -dir);
        x = wallX + ((hw + 1) * -dir);
        
        //Swap direction
        speedX *= -1;
    }
    
    //Check if should stop
    var xSpd = max(speedX, -speedX) * frc;
    if (xSpd &lt; 0.1) { speedX = 0; }
}

if (speedY != 0) {
    //Apply movement
    y += speedY * frc;
    speedY = lerp(speedY, 0, fric);
    
    //Check for walls
    var dir = sign(speedY);
    var yy = y + (hh * dir);
    var x1 = x - hw;
    var x2 = x + hw;
    var wall = collision_line(x1, yy, x2, yy, D7_Wall, false, false);
    if (wall) {
        //Bounce off wall
        var wallHH = wall.sprite_height / 2;
        var wallY = wall.y + wallHH + (wallHH * -dir);
        y = wallY + ((hh + 1) * -dir);
        
        //Swap direction
        speedY *= -1;
    }
    
    //Check if should stop
    var ySpd = max(speedY, -speedY) * frc;
    if (ySpd &lt; 0.1) { speedY = 0; }
}

if (speedX == 0 &amp;&amp; speedY == 0) {
    //Check for loss
    if (!gameDone &amp;&amp; energy == 0) {
        gameDone = true;
        dialog_show("Fail");
    }
    
    if (gameDone &amp;&amp; !Dialog.active) {
        room_goto(rom_Calendar);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="D7_Doodle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Murderfuch doodle

//Pick up
if (!Dialog.active) {
    doodles += other.value;
    energy = clamp(energy + other.energy, 0, energyMax);
}
with (other) { instance_destroy(); }

//Spawn more
if (instance_number(D7_Doodle) &lt; 30) {
    scr_D7_SpawnDoodleBatch();
}

//Check for power
if (!instance_exists(D7_Super) &amp;&amp; doodles &gt;= (winCount * 0.5)) {
    instance_create(x, y, D7_Super);
    dialog_show("Half");
}

//Check for win
if (!gameDone &amp;&amp; doodles &gt;= winCount) {
    D7_Super.state = "Super";
    gameDone = true;
    dialog_show("Win");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop pulling
if (!Dialog.active) {
    if (pulling) {
        pulling = false;
        var mDist = distance_to_point(mouse_x, mouse_y);
        if (mDist &gt;= 64) {
            //Launch
            speedX = x - mouse_x;
            speedY = y - mouse_y;
            energy--;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start pulling
if (!Dialog.active) {
    if (speedX == 0 &amp;&amp; speedY == 0) {
        pulling = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw line
if (pulling) {
    if (distance_to_point(mouse_x, mouse_y) &gt;= 64) {
        var distX = x - mouse_x;
        var distY = y - mouse_y;
        draw_set_colour(c_yellow);
        draw_line_width(x, y, x + distX, y + distY, 2);
    }
}

//Draw doodle count
var txtX = room_width / 2;
var txtY = room_height - (64 * 3);
var percent = clamp((doodles / winCount) * 100, 0, 100);
draw_set_font(fnt_Arial_Big);
draw_set_colour(c_orange);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(txtX, txtY, "Doodles: " + string(doodles) + " (" + string(percent) + "%)");
draw_set_halign(fa_left);
draw_set_valign(fa_top);

//Draw energy
var w = 64 * 4;
var x1 = (room_width / 2) - (w / 2);
var h = 24;
var y1 = txtY + 32;

//Draw frame
draw_set_colour(c_white);
draw_rectangle(x1, y1, x1 + w, y1 + h, false);

//Draw energy
var progress = energy / energyMax;
draw_set_colour(c_orange);
draw_rectangle(x1, y1, x1 + (w * progress), y1 + h, false);

//Draw text
draw_set_font(fnt_Arial_Small);
draw_set_colour(c_black);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(x1 + (w / 2), y1 + (h / 2), "Energiniv√•: " + string(energy) + " / " + string(energyMax));
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
