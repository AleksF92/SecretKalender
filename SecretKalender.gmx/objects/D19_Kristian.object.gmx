<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_D19_Kristian</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
image_speed = 0;

moveSpeed = 0;
moveSpeedMax = 40;
fallSpeed = 0;
worldX = x;
jumpForce = 22;
canJump = false;
leftFoot = false;
speedDamp = 4;
speedDampDelay = room_speed * 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slow down
moveSpeed--;
alarm[0] = speedDamp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events

//Find first ground below
var platform = collision_point(x, y + 1, D19_Ground, true, true);

//Apply gravity
if (platform == noone) {
    fallSpeed = clamp(fallSpeed + 1, fallSpeed, 30);
    y += fallSpeed;
    image_speed = 0;
}
else {
    fallSpeed = 0;
    canJump = true;
    while (collision_point(x, y - 1, platform, true, true)) { y -= 1; }
}

if (!Dialog.active) {
    if (canJump) {
        //Movements
        if (!leftFoot &amp;&amp; keyboard_check_pressed(ord("D"))) {
            leftFoot = !leftFoot;
            moveSpeed++;
            alarm[0] = speedDampDelay;
        }
        else if (leftFoot &amp;&amp; keyboard_check_pressed(ord("A"))) {
            leftFoot = !leftFoot;
            moveSpeed++;
            alarm[0] = speedDampDelay;
        }
    }
    else {
        if (alarm[0]) { alarm[0]++; }
    }
    moveSpeed = clamp(moveSpeed, 0, moveSpeedMax);
    
    var moveX = 1;
    if (moveX != 0) {
        image_xscale = moveX;
        
        var moveAmount = moveSpeed * moveX;
        if (collision_line(x + moveAmount, y - 8, x + moveAmount, y - (sprite_height / 2), D13_Box, false, true)) {
            moveAmount = 0;
        }
        
        var newWorldX = worldX + moveAmount;
        if (newWorldX &gt; 0 &amp;&amp; newWorldX &lt; D19_Game.spawnX) {
            //Move world
            worldX += moveAmount;
            for (var i = 0; i &lt; instance_number(D19_Ground); i++) {
                var ground = instance_find(D19_Ground, i);
                ground.x -= moveAmount;
            }
            for (var i = 0; i &lt; instance_number(D19_Ground_Filler); i++) {
                var filler = instance_find(D19_Ground_Filler, i);
                filler.x -= moveAmount;
            }
            for (var i = 0; i &lt; instance_number(D19_Doodle); i++) {
                var doodle = instance_find(D19_Doodle, i);
                doodle.x -= moveAmount;
            }
        }
    }
    if (canJump) {
        image_speed = (1 / room_speed) * moveSpeed * max(moveX, -moveX);
    }
    
    //Jump
    if (canJump &amp;&amp; keyboard_check(vk_space)) {
        canJump = false;
        fallSpeed = -jumpForce;
        y += fallSpeed;
        audio_play_sound(snd_D13_Jump, 0, false);
    }
    
    //Set correct sprite
    var fastThreshold = (moveSpeedMax / 4) * 3;
    if (sprite_index == spr_D19_Kristian &amp;&amp; moveSpeed &gt;= fastThreshold) {
        sprite_index = spr_D19_Fast;
        image_index = 0;
    }
    else if (sprite_index == spr_D19_Fast &amp;&amp; moveSpeed &lt; fastThreshold) {
        sprite_index = spr_D19_Kristian;
        image_index = 0;
    }
}
else {
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="D19_Doodle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat doodle
D19_Game.doodles += other.value;
with (other) { instance_destroy(); }
scr_sound(snd_D6_LevelUp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_self();

//Draw help
if (!Dialog.active &amp;&amp; moveSpeed &lt; moveSpeedMax / 4) {
    var key = "D";
    var xx = 32;
    if (leftFoot) {
        key = "A";
        xx = -32;
    }
    
    draw_set_font(fnt_Arial_Big);
    draw_set_colour(c_green);
    draw_text(x + xx, y - sprite_height - 32, key);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
