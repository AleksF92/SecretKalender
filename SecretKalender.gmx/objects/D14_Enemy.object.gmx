<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
range = 256;
wallDist = range * 0.25;
fov = 60;
sideAngle = fov / 2;
state = "";
target = noone;

losLength = 0;
leftX = 0;
leftY = 0;
rightX = 0;
rightY = 0;

bodySize = 16;

image_angle = random_int(0, 359);
turnSpeed = 0;
moveSpeed = 2;

tarX = 0;
tarY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Target focus duration

//Target lost
target = noone;
move_towards_point(x, y, 0);
tarX = 0;
tarY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Idle duration
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move duration

//Move ended
move_towards_point(x, y, 0);
alarm[2] = room_speed * random_range(1, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn duration
alarm[2] = room_speed * random_range(1, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
state = "Idle";

//Check distance to wall
losLength = 0;
while ((!collision_line(leftX, leftY, rightX, rightY, D14_Wall, true, true) &amp;&amp; losLength &lt; range) || losLength == 0) {
    //Increase len
    losLength += 1;
    
    //Calculate visual box
    leftX = x + lengthdir_x(losLength, image_angle - sideAngle);
    leftY = y + lengthdir_y(losLength, image_angle - sideAngle);
    rightX = x + lengthdir_x(losLength, image_angle + sideAngle);
    rightY = y + lengthdir_y(losLength, image_angle + sideAngle);
}



//Check if abort is needed
if (target || losLength &lt; wallDist) {
    alarm[0] = 0;
    alarm[1] = 0;
    alarm[2] = 0;
    move_towards_point(x, y, 0);
}



//Apply movement
if (alarm[0]) {
    //Turning
    image_angle += turnSpeed;
    turnSpeed *= 0.9;
    state = "Turning";
}
else if (alarm[1]) {
    //Walking
    var forwardX = x + lengthdir_x(1, image_angle);
    var forwardY = y + lengthdir_y(1, image_angle);
    move_towards_point(forwardX, forwardY, moveSpeed);
    state = "Moving";
}



//Check if needs to select new action
if (!(alarm[0] || alarm[1] || alarm[2]) || target) {
    if (target) {
        //Follow target
        image_angle = point_direction(x, y, target.x, target.y);
        if (losLength &lt; wallDist) {
            var dirX = lengthdir_x(wallDist, image_angle);
            var dirY = lengthdir_y(wallDist, image_angle);
            if (collision_line(x, y, x + dirX, y, D14_Wall, true, true)) {
                //Needs to strafe vertical
                tarX = x;
                tarY = y + sign(dirY);
            }
            else {
                //Needs to strafe horizontal
                tarY = y;
                tarX = x + sign(dirX);
            }
        }
        else {
            tarX = target.x;
            tarY = target.y;
        }
        
        move_towards_point(tarX, tarY, moveSpeed);
    }
    else if (losLength &lt; wallDist) {
        var distX = rightX - leftX;
        var distY = rightY - leftY;
        var cx = leftX + (distX / 2);
        var cy = leftY + (distY / 2);
        var forcedDir = 1;
        if (collision_line(leftX, leftY, cx, cy, D14_Wall, true, true)) { turnDir = -1; }
        image_angle += random_range(0.5, 4) * forcedDir;
        state = "Turning from wall";
    }
    else {
        //Do random movement
        var turn = choose(true, false);
        if (turn) {
            //Start looking
            alarm[0] = room_speed * random_range(0.5, 1.5);
            turnSpeed = random_range(0.5, 4) * choose(1, -1);
        }
        else {
            //Start moving
            alarm[1] = room_speed * random_range(1, 2.5);
        }
    }
}



//Check if player is in sight
if (point_in_triangle(D14_Aleks.x, D14_Aleks.y, x, y, leftX, leftY, rightX, rightY)) {
    target = D14_Aleks;
    alarm[3] = room_speed * 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

//Find state color
var bodyCol = c_orange;
var visionCol = c_yellow;
if (target) {
    bodyCol = c_red;
    visionCol = c_orange;
}

//Draw vision
draw_set_colour(visionCol);
draw_set_alpha(0.1);
draw_triangle(x, y, leftX, leftY, rightX, rightY, false);
draw_set_alpha(1);

//Draw body
draw_set_colour(bodyCol);
draw_circle(x, y, bodySize, false);

//Draw debug
/*
draw_set_font(fnt_Arial_Small);
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_text(x, y - bodySize,
    "State: " + state
    + "#[0]: " + string(alarm[0])
    + "#[1]: " + string(alarm[1])
    + "#[2]: " + string(alarm[2])
);
draw_set_halign(fa_left);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
