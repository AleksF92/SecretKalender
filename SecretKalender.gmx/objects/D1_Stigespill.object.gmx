<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
gridSize = 64;
tilesX = room_width div gridSize;
tilesY = (room_height div gridSize) - 4;
tiles = ds_grid_create(tilesX, tilesY);
colOdd = make_colour_rgb(125, 0, 0);
colEven = make_colour_rgb(0, 125, 0);

winTileId = (tilesY * tilesX) - 1;
stigTileId = 0;
addValue = 0;
moveDelay = room_speed / 5;
event = true;
cardIntro = false;
drawDelay = room_speed;
pikaIntro = false;

//Fill tiles
ds_grid_clear(tiles, 0);
tiles[# tilesX - 1, tilesY - 1] = D1_GOAL;

//Spawn good
var numSpawns = random_int(4, 8);
for (var i = 0; i &lt; numSpawns; i++) {
    while (true) {
        var randX = random_int(0, tilesX - 1);
        var randY = random_int(0, tilesY - 1);
        if (tiles[# randX, randY] == 0) {
            var randPokemonId = random_int(D1_GOOD, D1_GOOD + 2);
            tiles[# randX, randY] = randPokemonId;
            break;
        }
    }
}

//Spawn neutral
var numSpawns = random_int(2, 6);
for (var i = 0; i &lt; numSpawns; i++) {
    while (true) {
        var randX = random_int(0, tilesX - 1);
        var randY = random_int(0, tilesY - 1);
        if (tiles[# randX, randY] == 0) {
            var randPokemonId = random_int(D1_NEUTRAL, D1_NEUTRAL + 2);
            tiles[# randX, randY] = randPokemonId;
            break;
        }
    }
}

//Spawn bad
var numSpawns = random_int(8, 16);
for (var i = 0; i &lt; numSpawns; i++) {
    while (true) {
        var randX = random_int(0, tilesX - 1);
        var randY = random_int(0, tilesY - 1);
        if (tiles[# randX, randY] == 0 &amp;&amp; !(randX == 0 &amp;&amp; randY == 0) &amp;&amp; !(randX = tilesX - 1 &amp;&amp; randY == tilesY - 1)) {
            var randPokemonId = random_int(D1_BAD, D1_BAD + 1);
            tiles[# randX, randY] = randPokemonId;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Card draw cooldown

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add movement
if (event) {
    //Delay until done
    alarm[0] = 1;
}
else {
    stigTileId += sign(addValue);
    addValue -= sign(addValue);
    audio_play_sound(snd_D1_Step, 0, false);
    
    if (stigTileId == 0 || stigTileId == winTileId) { addValue = 0; }
    
    var stigY = stigTileId div tilesX;
    var stigX = stigTileId - (stigY * tilesX);
    var stigTileType = tiles[# stigX, stigY];
    if (addValue == 0) {
        //Process event
        if (stigTileType &gt;= D1_GOOD) {
            addValue = random_int(5, 20);
            if (stigTileType &gt;= D1_NEUTRAL &amp;&amp; stigTileType &lt; D1_BAD) { addValue *= choose(1, -1); }
            if (stigTileType &gt;= D1_BAD) { addValue *= -1; }
            if (pikaIntro) {
                //Go back to event
                Dialog.currentId -= 3;
            }
            pikaIntro = true;
            Dialog.active = true;
            Dialog.alarm[0] = 1;
            event = true;
            audio_play_sound(snd_D1_Pokemon, 0, false);
        }
        
        //Cooldown draw
        alarm[1] = drawDelay;
    }
    else {
        alarm[0] = moveDelay;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
if (!event) {
    if (stigTileId == winTileId) {
        //Done, trigger end
        Dialog.active = true;
        Dialog.alarm[0] = 1;
        event = true;
        
        //Set dialog to ending
        Dialog.currentId = ds_list_size(Dialog.texts) - 2;
    }
    
    if (addValue != 0) {
        if (!alarm[0]) {
            alarm[0] = 1;
        }
    }
    else {
        if (!D1_Card.visible &amp;&amp; !alarm[1]) {
            //Show random cards
            with (D1_Card) { value = random_int(1, 4); }
            D1_Card.visible = true;

            //Check if card intro is needed
            if (!cardIntro) {
                cardIntro = true;
                Dialog.active = true;
                Dialog.alarm[0] = 1;
                event = true;
                D1_Card.y = room_height / 2;
            }
        }
    }
}

if (keyboard_check_pressed(vk_lshift)) {
    show_message("Event: " + string(event));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw board
for (var yy = 0; yy &lt; tilesY; yy++) {
    var tileY = gridSize * (tilesY - yy);
    
    for (var xx = 0; xx &lt; tilesX; xx++) {
        var tileX = gridSize * xx;
        if (yy mod 2 == 1) { tileX = gridSize * (tilesX - xx - 1); }
        var tileId = (yy * tilesX) + xx;
        var tileCol = colOdd;
        if (xx mod 2 == 0) { tileCol = colEven; }
        //if (yy mod 2 == 1 &amp;&amp; tileId mod 2 == 1) { tileCol = colEven; }

        //Draw tile
        var tileType = tiles[# xx, yy];
        if (tileType &gt; 0) {
            //Draw special tile
            draw_sprite(spr_D1_Icons, tileType, tileX, tileY);
        }
        else {
            //Draw background
            draw_set_colour(tileCol);
            draw_rectangle(tileX, tileY, tileX + gridSize, tileY + gridSize, false);
        }
        
        if (tileId == stigTileId) {
            //Draw stig
            draw_sprite(spr_D1_Icons, D1_STIG, tileX, tileY);
        }
        
        //Draw tile number
        draw_set_font(fnt_Arial_Small);
        draw_set_colour(c_navy);
        draw_text(tileX + 4, tileY + 4, string(tileId + 1));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
