<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
xMin = 64 * 2;
xMax = xMin + 64;
yMin = 64 * 3;
yMax = room_height - (64 * 3);
playingGuitar = false;
noteScore = 0;
hpMax = 100;
hp = hpMax;
gameDone = false;
scr_music(noone);

//Create lanes
var numLanes = 4;
var totalLaneH = yMax - yMin;
var laneH = totalLaneH / (numLanes + 1);
lanes = ds_list_create();
for (var i = 0; i &lt; numLanes; i++) {
    ds_list_add(lanes, (yMin + laneH) + (laneH * i));
}

laneCol = ds_list_create();
ds_list_add(laneCol, c_green);
ds_list_add(laneCol, c_red);
ds_list_add(laneCol, c_yellow);
ds_list_add(laneCol, c_blue);

noteType = ds_list_create();
ds_list_add(noteType, D17_1);
ds_list_add(noteType, D17_2);
ds_list_add(noteType, D17_3);
ds_list_add(noteType, D17_4);

heldNote = ds_list_create();
ds_list_add(heldNote, false);
ds_list_add(heldNote, false);
ds_list_add(heldNote, false);
ds_list_add(heldNote, false);

//Spawn notes
spawnX = 0;
scr_D17_Note(4, (room_width / 2) + 32, 0);
scr_D17_Note(4, 64 * 6, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delay music
scr_music(bgm_D17);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
if (!Dialog.active) {
    if (!playingGuitar) {
        //Start playing
        alarm[0] = room_speed;
        playingGuitar = true;
    }
    else {
        if (gameDone) {
            room_goto(rom_Calendar);
        }
        else {
            if (hp &lt;= 0) {
                gameDone = true;
                dialog_show("Fail");
            }
            else {
                //Playing guitar
                for (var i = 0; i &lt; ds_list_size(lanes); i++) {
                    var noteKey = ord(string(i + 1));
                    if (keyboard_check_pressed(noteKey)) {
                        var note = collision_line(xMin, lanes[| i], xMax, lanes[| i], noteType[| i], false, true);
                        if (note != noone &amp;&amp; !note.hit) {
                            //Add note score
                            note.hit = true;
                            noteScore += 100;
                            audio_master_gain(1);
                            
                            if (note.dur &gt; 0) {
                                //Long note hit
                                heldNote[| i] = true;
                            }
                            else {
                                note.good = true;
                            }
                        }
                        else {
                            //Fail
                            audio_master_gain(0.25);
                        }
                    }
                    else if (keyboard_check_released(noteKey)) {
                        if (heldNote[| i] &amp;&amp; note.dur &gt; 0) {
                            heldNote[| i] = false;
                            note.good = true;
                        }
                    }
                    else {
                        //Holding
                        if (heldNote[| i] &amp;&amp; note.dur &gt; 0) {
                            //Long note held
                            var centerHit = xMin + ((xMax - xMin) / 2);
                            var noteEnd = note.x + note.dur;
                            if (noteEnd &gt; centerHit) {
                                //Holding note
                                noteScore += 2;
                            }
                            else {
                                //Note at end
                                note.good = true;
                            }
                        }
                        heldNote[| i] = false;
                        note.good = true;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw lanes
for (var i = 0; i &lt; ds_list_size(lanes); i++) {
    draw_set_colour(laneCol[| i]);
    draw_line_width(0, lanes[| i], room_width, lanes[| i], 8);
}

//Playfield
draw_set_colour(c_white);
draw_set_alpha(0.1);
draw_rectangle(xMin, yMin, xMax, yMax, false);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
