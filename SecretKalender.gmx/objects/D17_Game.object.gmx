<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

xMin = 64 * 2;
xMax = xMin + 64;
yMin = 64 * 3;
yMax = room_height - (64 * 3);
playingGuitar = false;
noteScore = 0;
hpMax = 10;
hp = hpMax;
gameDone = false;
lowVolume = 0.2;
highVolume = 1;
scr_music(noone);

//Create lanes
var numLanes = 4;
var totalLaneH = yMax - yMin;
var laneH = totalLaneH / (numLanes + 1);
lanes = ds_list_create();
for (var i = 0; i &lt; numLanes; i++) {
    ds_list_add(lanes, (yMin + laneH) + (laneH * i));
}

laneCol = ds_list_create();
ds_list_add(laneCol, c_green);
ds_list_add(laneCol, c_red);
ds_list_add(laneCol, c_yellow);
ds_list_add(laneCol, c_blue);

noteType = ds_list_create();
ds_list_add(noteType, D17_1);
ds_list_add(noteType, D17_2);
ds_list_add(noteType, D17_3);
ds_list_add(noteType, D17_4);

//Spawn notes
spawnX = 0;
lastX = 0;
nowX = 0;
tapCount = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Notes
scr_D17_Note(1, room_width / 2, 0);
scr_D17_Note(1, 408, 0);
scr_D17_Note(1, 532, 0);
scr_D17_Note(1, 100, 0);
scr_D17_Note(2, 116, 0);
scr_D17_Note(2, 96, 0);
scr_D17_Note(3, 112, 0);
scr_D17_Note(3, 88, 0);
scr_D17_Note(1, 88, 0);
scr_D17_Note(1, 96, 0);
scr_D17_Note(2, 96, 0);
scr_D17_Note(2, 96, 0);
scr_D17_Note(3, 104, 0);
scr_D17_Note(3, 84, 0);
scr_D17_Note(1, 76, 536);
scr_D17_Note(2, 568, 0);
scr_D17_Note(3, 100, 384);
scr_D17_Note(4, 436, 468);
scr_D17_Note(3, 508, 0);
scr_D17_Note(2, 80, 532);
scr_D17_Note(3, 576, 504);
scr_D17_Note(4, 552, 524);
scr_D17_Note(3, 580, 536);
scr_D17_Note(1, 592, 236);
scr_D17_Note(2, 280, 244);
scr_D17_Note(1, 276, 0);
scr_D17_Note(1, 112, 0);
scr_D17_Note(2, 128, 0);
scr_D17_Note(2, 108, 0);
scr_D17_Note(3, 120, 0);
scr_D17_Note(3, 116, 0);
scr_D17_Note(4, 124, 216);
scr_D17_Note(1, 260, 0);
scr_D17_Note(1, 104, 0);
scr_D17_Note(2, 104, 196);
scr_D17_Note(1, 236, 0);
scr_D17_Note(1, 116, 0);
scr_D17_Note(2, 112, 204);
scr_D17_Note(1, 252, 0);
scr_D17_Note(1, 116, 0);
scr_D17_Note(2, 104, 232);
scr_D17_Note(3, 264, 0);
scr_D17_Note(3, 120, 0);
scr_D17_Note(4, 92, 216);
scr_D17_Note(1, 264, 0);
scr_D17_Note(1, 120, 0);
scr_D17_Note(3, 100, 188);
scr_D17_Note(1, 272, 0);
scr_D17_Note(1, 104, 0);
scr_D17_Note(2, 100, 184);
scr_D17_Note(1, 248, 0);
scr_D17_Note(1, 120, 0);
scr_D17_Note(3, 104, 232);
scr_D17_Note(1, 288, 0);
scr_D17_Note(1, 104, 0);
scr_D17_Note(2, 100, 200);
scr_D17_Note(1, 252, 0);
scr_D17_Note(1, 116, 0);
scr_D17_Note(3, 100, 148);
scr_D17_Note(1, 252, 0);
scr_D17_Note(1, 104, 0);
scr_D17_Note(3, 104, 168);
scr_D17_Note(4, 224, 0);
scr_D17_Note(4, 120, 0);
scr_D17_Note(3, 120, 220);
scr_D17_Note(3, 260, 0);
scr_D17_Note(3, 96, 0);
scr_D17_Note(1, 112, 200);
scr_D17_Note(1, 240, 0);
scr_D17_Note(1, 124, 88);
scr_D17_Note(1, 120, 80);
scr_D17_Note(1, 120, 616);
scr_D17_Note(3, 700, 356);
scr_D17_Note(4, 396, 132);
scr_D17_Note(4, 184, 196);
scr_D17_Note(3, 368, 0);
scr_D17_Note(3, 208, 0);
scr_D17_Note(3, 188, 376);
scr_D17_Note(1, 456, 188);
scr_D17_Note(2, 212, 224);
scr_D17_Note(1, 264, 200);
scr_D17_Note(2, 220, 228);
scr_D17_Note(1, 256, 188);
scr_D17_Note(2, 224, 208);
scr_D17_Note(1, 248, 196);
scr_D17_Note(2, 228, 204);
scr_D17_Note(3, 252, 180);
scr_D17_Note(2, 220, 212);
scr_D17_Note(3, 256, 196);
scr_D17_Note(2, 228, 216);
scr_D17_Note(3, 248, 192);
scr_D17_Note(2, 228, 192);
scr_D17_Note(3, 236, 188);
scr_D17_Note(2, 216, 220);
scr_D17_Note(1, 276, 892);
scr_D17_Note(2, 996, 172);
scr_D17_Note(2, 252, 160);
scr_D17_Note(2, 248, 184);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delay music
scr_music(bgm_D17);
var mins = 1;
var secs = 32;
alarm[1] = room_speed * ((60 * mins) + secs);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
if (!Dialog.active) {
    if (!playingGuitar) {
        //Start playing
        alarm[0] = room_speed;
        playingGuitar = true;
        //file_delete("DebugData.txt");
    }
    else {
        if (gameDone) {
            room_goto(rom_Calendar);
        }
        else {
            nowX += 4;
            
            /*
            if (keyboard_check_pressed(vk_space)) {
                var space = nowX - lastX;
                var file = file_text_open_append("DebugData.txt");
                var str = "scr_D17_Note(D17_1, " + string(space)
                file_text_write_string(file, str);
                file_text_close(file);
                lastX = nowX;
            }
            else if (keyboard_check_released(vk_space)) {
                var length = nowX - lastX;
                if (length &lt; 64) { length = 0; }
                var file = file_text_open_append("DebugData.txt");
                var str = ", " + string(length) + ");";
                file_text_write_string(file, str);
                file_text_writeln(file);
                file_text_close(file);
            }*/

            if (!(alarm[0] || alarm[1])) {
                gameDone = true;
                dialog_show("Win");
                scr_music(noone);
            }
            if (hp &lt;= 0) {
                gameDone = true;
                dialog_show("Fail");
            }
            else {
                //Playing guitar
                for (var i = 0; i &lt; ds_list_size(lanes); i++) {
                    var noteKey = ord(string(i + 1));
                    var note = collision_line(xMin, lanes[| i], xMax, lanes[| i], noteType[| i], false, true);
               /*     
            if (keyboard_check_pressed(noteKey)) {
                var space = nowX - lastX;
                var file = file_text_open_append("DebugData.txt");
                var str = "scr_D17_Note(" + string(i + 1) + ", " + string(space)
                file_text_write_string(file, str);
                file_text_close(file);
                lastX = nowX;
            }
            else if (keyboard_check_released(noteKey)) {
                var length = nowX - lastX;
                if (length &lt; 64) { length = 0; }
                var file = file_text_open_append("DebugData.txt");
                var str = ", " + string(length) + ");";
                file_text_write_string(file, str);
                file_text_writeln(file);
                file_text_close(file);
            }*/
                    
                    if (keyboard_check_pressed(noteKey)) {
                        if (note &amp;&amp; !note.hit) {
                            //Add note score
                            note.hit = true;
                            noteScore += 100;
                            hp += 1;
                            if (hp &gt; hpMax) { hp = hpMax; }
                            audio_master_gain(highVolume);
                            
                            if (note.dur &lt;= 0) {
                                note.good = true;
                            }
                        }
                        else {
                            //Fail
                            //audio_master_gain(lowVolume);
                            //hp -= 1;
                        }
                    }
                    else if (keyboard_check_released(noteKey)) {
                        with (noteType[| i]) {
                            if (hit &amp;&amp; !good &amp;&amp; dur &gt; 0) {
                                good = true;
                            }
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

//Playfield
draw_set_colour(c_black);
draw_set_alpha(0.3);
draw_rectangle(xMin, yMin, xMax, yMax, false);
draw_set_alpha(1);

//Draw lanes
draw_set_colour(c_white);
for (var i = 0; i &lt; ds_list_size(lanes); i++) {
    draw_line_width(0, lanes[| i], room_width, lanes[| i], 4);
}

draw_set_font(fnt_Arial_Big);
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_text(room_width / 2, 64 * 2, "Poengsum: " + string(noteScore));
draw_set_halign(fa_left);

//Draw hp
var bw = 512;
var bh = 20;
var x1 = (room_width / 2) - (bw / 2);
var y1 = 64 + 32;
draw_set_colour(c_red);
draw_rectangle(x1, y1, x1 + bw, y1 + bh, false);
if (hp &lt; 0) { hp = 0; }
var prog = hp / hpMax;
draw_set_colour(c_green);
draw_rectangle(x1, y1, x1 + (bw * prog), y1 + bh, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
