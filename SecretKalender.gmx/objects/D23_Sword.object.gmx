<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_D23_Sword</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
x = D23_Kristian.x;
y = D23_Kristian.y;

SWING_ANGLE = 120;
swingSpeed = 0;
swingStart = 0;
swingEnd = 0;
swingDir = 1;
rageTime = room_speed * 2;

gameDone = false;
kills = 0;
minTime = room_speed * 2;
maxTime = room_speed * 4;
energy = 0;
energyMax = 5;
level = 1;
killReq = 100;

infoRage = true;
scr_music(noone);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn larsen
if (!Dialog.active &amp;&amp; instance_number(D23_Mob) &lt;= 4) {
    var count = 1;
    if (random_int(1, 100) &lt;= 10 &amp;&amp; level &gt;= 2) { count = random_int(4, 10); }
    for (var i = 0; i &lt; count; i++) {
        if (kills + instance_number(D23_Mob) &lt; killReq) {
            //Select spawn pos
            var off = 32;
            var spawnX = choose(-off, room_width + off);
            var spawnY = choose(32 - off, room_height + off);
            
            //Add variation to one axis
            if (choose(true, false)) {
                spawnX = random_int(-off, room_width + off);
            }
            else {
                spawnY = random_int(32 - off, room_height + off);
            }
            
            //Spawn
            var larsen = instance_create(spawnX, spawnY, D23_Mob);
        }
    }
}

//Set new timer
alarm[1] = random_range(minTime, maxTime);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rage timer
swingSpeed = 0;
energy = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
if (!Dialog.active) {
    if (gameDone) {
        room_goto(rom_Calendar);
    }
    
    if (!alarm[1]) { alarm[1] = room_speed; }

    if (swingSpeed &gt; 0) {
        //Add angle
        swingSpeed += 0.6;
        if (swingSpeed &gt; 20) { swingSpeed = 20; }
        image_angle -= (swingSpeed * swingDir);
        
        if (alarm[0] &amp;&amp; !audio_is_playing(snd_D23_SwingFast)) {
            scr_sound(snd_D23_SwingFast);
        }
        
        //Check swing
        var atBotLeft = (swingDir == -1 &amp;&amp; image_angle &gt;= swingEnd);
        var atBotRight = (swingDir == 1 &amp;&amp; image_angle &lt;= swingEnd);
        if ((atBotLeft || atBotRight) &amp;&amp; !alarm[0]) {
            //Swing done
            swingSpeed = 0;
        }
    }
    else if (mouse_check_button(mb_left)) {
        scr_sound(snd_D23_Swing);
        //Determine direction
        swingDir = 1 - ((mouse_x &lt; room_width / 2) * 2);
        var angle = point_direction(x, y, mouse_x, mouse_y);
        var halfSwing = SWING_ANGLE / 2;
        image_xscale = swingDir;
        
        //Set start and end point
        if (swingDir == 1) {
            swingStart = angle + halfSwing;
            swingEnd = angle - halfSwing;
        }
        else {
            angle += 180;
            swingStart = angle - halfSwing;
            swingEnd = angle + halfSwing;
        }
        
        //Start swing
        image_angle = swingStart;
        swingSpeed = 0.1;
    }
    else if (mouse_check_button_pressed(mb_right)) {
        if (energy &gt;= energyMax &amp;&amp; !alarm[0]) {
            //Determine direction
            swingDir = 1 - ((mouse_x &lt; room_width / 2) * 2);
            var angle = point_direction(x, y, mouse_x, mouse_y);
            var halfSwing = SWING_ANGLE / 2;
            image_xscale = swingDir;
            
            //Set start and end point
            var spins = 20;
            if (swingDir == 1) {
                swingStart = angle + halfSwing;
            }
            else {
                angle += 180;
                swingStart = angle - halfSwing;
            }
            
            //Start swing
            image_angle = swingStart;
            swingSpeed = 0.1;
            alarm[0] = rageTime;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="D23_Mob">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill
if (swingSpeed &gt; 0) {
    kills++;
    if (!alarm[0]) { energy++; }
    if (energy &gt;= energyMax) {
        energy = energyMax;
        if (infoRage) {
            dialog_show("Info: Rage");
            infoRage = false;
        }
    }
    with (other) { instance_destroy(); }
    scr_sound(snd_D19_Doodle);
    
    //Check if at new level
    if (level == 1 &amp;&amp; kills &gt;= 5) {
        minTime = room_speed * 1;
        maxTime = room_speed * 2;
        level++;
    }
    else if (level == 2 &amp;&amp; kills &gt;= 20) {
        minTime = room_speed * 0.75;
        maxTime = room_speed * 1.5;
        level++;
    }
    else if (level == 3 &amp;&amp; kills &gt;= 60) {
        minTime = room_speed * 0.5;
        maxTime = room_speed * 1;
        level++;
    }
    else if (level == 4 &amp;&amp; kills &gt;= killReq) {
        gameDone = true;
        dialog_show("Win");
        alarm[1] = 0; 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw status
var w = 512;
var h = 20;
var x1 = (room_width / 2) - (w / 2);
var y1 = 64 + 8;

//Draw rage bar frame
draw_set_colour(c_maroon);
draw_rectangle(x1, y1, x1 + w, y1 + h, false);

//Progress
var prog = energy / energyMax;
if (alarm[0] &gt;= 0) {
    prog = alarm[0] / rageTime;
    energy = energyMax * prog;
}
draw_set_colour(c_red);
draw_rectangle(x1, y1, x1 + (w * prog), y1 + h, false);

//Text
draw_set_font(fnt_Arial_Small);
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(x1 + (w / 2), y1 + (h / 2), "Adrenalin-nivå");

//Draw kills
draw_set_font(fnt_Arial_Medium);
draw_set_colour(c_white);
if (kills &gt; killReq) { kills = killReq; }
draw_text(room_width / 2, y1 + h + 40, "Nivå: " + string(level) + "#Kloner drept: " + string(kills) + " / " + string(killReq));
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
