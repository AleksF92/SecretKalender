<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
gameDone = false;

//Calculate bottom and top placements
var h = sprite_get_height(spr_D13_Ground);
hillH = h / 2;
spawnBottom = room_height - h;
spawnTop = spawnBottom;
while (spawnTop - hillH &gt;= 0) { spawnTop -= hillH; }

//Set spawn start
spawnX = 0;
spawnY = spawnBottom;
scr_music(bgm_D19);

numDoodles = 0;
doodles = 0;
reqDoodles = 0;
startedTimer = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate world
for (var i = 0; i &lt; 80; i++) {
    var randGround = instance_create(spawnX, spawnY, D19_Ground);
    if (i &lt; 1) {
        randGround.image_index = 0;
        spawnY = spawnBottom;
    }
}

//Generate pops
var popX = room_width;
var num = 0;
var groundDist = 0;
while (popX &lt; spawnX) {
    //Check if new row
    if (num == 0) {
        num = choose(5, 10);
        popX += choose(64 * 12, 64 * 18);
        groundDist = choose(64 * 1, 64 * 4);
    }
    
    //Spawn doodle
    num--;
    numDoodles++;
    reqDoodles++;
    var doodle = instance_create(popX, room_height - sprite_get_height(spr_D7_CheesDoodle), D19_Doodle);
    doodle.y -= groundDist;
    
    //Prep next doodle
    popX += 64 * 2;
}

//Requre half doodles
reqDoodles = floor(reqDoodles * 0.75);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timer
if (!gameDone) {
    gameDone = true;
    dialog_show("Fail: Time");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
if (!Dialog.active) {
    if (gameDone) {
        room_goto(rom_Calendar);
    }
    else {
        if (!startedTimer) {
            alarm[0] = room_speed * 45;
            startedTimer = true;
        }
        
        if (D19_Kristian.worldX &gt; spawnX - (room_width / 4)) {
            gameDone = true;
            if (doodles &gt; reqDoodles) {
                dialog_show("Win");
            }
            else {
                dialog_show("Fail: Doodles");
            }
        }
    }
}
else {
    if (alarm[0]) { alarm[0]++; }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw info

//Draw doodle
draw_sprite(spr_D7_CheesDoodle, 1, (room_width / 2) - 64, window_get_height() - 64);

//Draw count
draw_set_font(fnt_Arial_Big);
draw_set_colour(c_white);
draw_set_valign(fa_middle);
draw_text((room_width / 2) - 32, window_get_height() - 64, "x" + string(doodles) + " / " + string(reqDoodles));
draw_set_valign(fa_top);

//Draw timer
var timeStr = "0";
if (alarm[0]) {
    var ss = floor(alarm[0] / room_speed);
    timeStr = string(ss);
}

draw_set_colour(c_red);
draw_set_halign(fa_center);
draw_text(room_width / 2, window_get_height() - 32, "Tid: " + timeStr + " sekunder");
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
