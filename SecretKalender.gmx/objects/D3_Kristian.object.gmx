<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Face_Kristian</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
hpMax = 100;
hp = hpMax;
blockX = 0;
blockY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if (!Dialog.active) {
    var moveX = keyboard_check(ord("D")) - keyboard_check(ord("A"));
    var moveY = keyboard_check(ord("S")) - keyboard_check(ord("W"));
    
    //Check movement speed
    var block = D3_MadKristian.blocks[# blockX, blockY];
    var moveSpeed = 3;
    if (block == spr_D3_Path) { moveSpeed = 2; }
    else if (block == spr_D3_Stone) { moveSpeed = 1; }
    
    if (moveX != 0) {
        //Check if moving agianst the edge of the world
        var newWorldX = x + (moveSpeed * moveX);
        var lowEdgeX = 0;
        var highEdgeX = (D3_MadKristian.gridSize * D3_MadKristian.tilesX) - 1;
        if (newWorldX &lt; lowEdgeX) {
            x = lowEdgeX;
        }
        else if (newWorldX &gt; highEdgeX) {
            x = highEdgeX;
        }
        else {
            //Check if will be in new block and obsidian
            var newX = newWorldX div D3_MadKristian.gridSize;
            var newBlock = D3_MadKristian.blocks[# newX, blockY];
        
            if (newBlock == spr_D3_Obsidian || (newBlock == noone &amp;&amp; block != noone)) {
                var sideOffset = 0.5 + (0.5 * -moveX);
                var blockWorldEdge = (D3_MadKristian.gridSize * (blockX + moveX + sideOffset));
                x = blockWorldEdge - moveX;
            }
            else {
                x += (moveSpeed * moveX);
            }
        }
    }
    if (moveY != 0) {
        //Check if moving against the edge of the world
        var newWorldY = y + (moveSpeed * moveY);
        var lowEdgeY = D3_MadKristian.gridSize;
        var highEdgeY = (D3_MadKristian.gridSize * (D3_MadKristian.tilesY + 1)) - 1;
        if (newWorldY &lt; lowEdgeY) {
            y = lowEdgeY;
        }
        else if (newWorldY &gt; highEdgeY) {
            y = highEdgeY;
        }
        else {
            //Check if will be in new block and obsidian
            var newY = (newWorldY - D3_MadKristian.gridSize) div D3_MadKristian.gridSize;
            var newBlock = D3_MadKristian.blocks[# blockX, newY];
        
            if (newBlock == spr_D3_Obsidian || (newBlock == noone &amp;&amp; block != noone)) {
                var sideOffset = 0.5 + (0.5 * -moveY);
                var blockWorldEdge = (D3_MadKristian.gridSize * (blockY + moveY + sideOffset + 1));
                y = blockWorldEdge - moveY;
            }
            else {
                y += (moveSpeed * moveY);
            }
        }
    }
    
    //Find current block
    blockX = x div D3_MadKristian.gridSize;
    blockY = (y - D3_MadKristian.gridSize) div D3_MadKristian.gridSize;
    
    //TNT placement
    if (keyboard_check_pressed(vk_space)) {
        if (D3_MadKristian.tnts &gt; 0) {
            D3_MadKristian.tnts--;
            var worldX = (D3_MadKristian.gridSize * blockX) + 8;
            var worldY = (D3_MadKristian.gridSize * (blockY + 1)) + 8;
            var tnt = instance_create(worldX, worldY, D3_TNT);
            tnt.blockX = blockX;
            tnt.blockY = blockY;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw with health

//Draw self
draw_self();

//Draw hp
if (hp &lt; hpMax) {
    var progress = hp / hpMax;
    var barW = 128;
    var barH = 8;
    var barX = x - (barW / 2);
    var barY = y - 64;
    
    //Draw frame
    draw_set_colour(c_white);
    draw_rectangle(barX, barY, barX + barW, barY + barH, false);
    
    //Draw hp
    draw_set_colour(c_red);
    draw_rectangle(barX, barY, barX + (barW * progress), barY + barH, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
