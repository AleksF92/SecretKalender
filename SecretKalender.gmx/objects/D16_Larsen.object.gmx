<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Face_Larsen</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
goToBed = true;
gameDone = false;
sleepTime = room_speed * 60;
wakeupTimeMax = room_speed * 1;
wakeupTime = 2;
light = false;
infoGhost = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn ghost
instance_create(0, 0, D16_Ghost);
alarm[2] = room_speed * random_int(1, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wake up duration
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sleep duration required
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
if (!Dialog.active) {
    //Intro
    if (goToBed) {
        if (!path_index) {
            path_start(pat_D16_Bedtime, 2, path_action_stop, true);
        }
    }
    else {
        //Check if game done
        if (gameDone) {
            room_goto(rom_Calendar);
        }
        else {
            if (!alarm[0]) {
                //Done sleeping
                gameDone = true;
                instance_deactivate_object(D16_Ghost);
                dialog_show("Win");
            }
            else if (!alarm[1]) {
                //Woke up
                gameDone = true;
                instance_deactivate_object(D16_Ghost);
                dialog_show("Fail");
            }
            else {
                if (light) {
                    //Wake up
                    wakeupTime = alarm[1];
                }
                else {
                    //Sleeping
                    wakeupTime = clamp(wakeupTime + 1, 2, wakeupTimeMax);
                    alarm[1] = wakeupTime;
                }
            }
        }
    }
}
else {
    if (alarm[0]) { alarm[0] += 1; }
    if (alarm[1]) { alarm[1] += 1; }
    if (alarm[2]) { alarm[2] += 1; }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///In bed
goToBed = false;
alarm[0] = sleepTime;
alarm[1] = wakeupTime;
alarm[2] = room_speed;
with (D16_Lamp) { on = false; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw status
if (alarm[0]) {
    //Settings
    var w = 512;
    var h = 16;
    var x1 = (room_width / 2) - (w / 2);
    var y1 = (64 + 32);
    var y2 = y1 + h + 8;
    
    //Draw sleep duration
    draw_set_color(c_white);
    draw_rectangle(x1, y1, x1 + w, y1 + h, false);
    
        //Draw progress
        var p1 = (sleepTime - alarm[0]) / sleepTime;
        draw_set_color(c_green);
        draw_rectangle(x1, y1, x1 + (w * p1), y1 + h, false);
        
    //Draw wakeup duration
    draw_set_color(c_white);
    draw_rectangle(x1, y2, x1 + w, y2 + h, false);
    
        //Draw progress
        var p2 = alarm[1] / wakeupTimeMax;
        draw_set_color(c_blue);
        draw_rectangle(x1, y2, x1 + (w * p2), y2 + h, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
