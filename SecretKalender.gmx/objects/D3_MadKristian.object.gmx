<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
gridSize = 64;
tilesX = room_width div gridSize;
tilesY = (room_height div gridSize) - 4;
blocks = ds_grid_create(tilesX, tilesY);
meta = ds_grid_create(tilesX, tilesY);
tnts = 8;
gameDone = false;

//Check amount of remaining blocks
blocksTotal = tilesX * tilesY;
blocksAlive = 0;
for (var yy = 0; yy &lt; tilesY; yy++) {
    for (var xx = 0; xx &lt; tilesX; xx++) {
        //If countable block
        if (blocks[# xx, yy] != noone) {
            blocksAlive++;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate world

//Place earth everywhere
ds_grid_clear(blocks, spr_D3_Earth);
ds_grid_clear(meta, 0);

//Place random decor spots
var numSpots = random_int(3, 8);
for (var i = 0; i &lt; numSpots; i++) {
    //Select random start spot
    var spotX = random_int(0, tilesX - 1);
    var spotY = random_int(0, tilesY - 1);
    var spotMeta = random_int(1, sprite_get_number(spr_D3_Earth) - 1);
    
    //Step random amount of times
    var numSteps = random_int(5, 12);
    for (var j = 0; j &lt; numSteps; j++) {
        //Place block, if you can
        if (spotX &gt;= 0 &amp;&amp; spotX &lt; tilesX) {
            if (spotY &gt;= 0 &amp;&amp; spotY &lt; tilesY) {
                meta[# spotX, spotY] = spotMeta;
            }
        }
        
        //Move random dir
        spotX += choose(-1, 0, 1);
        spotY += choose(-1, 0, 1);
    }
}

//Place random stone spots
var numSpots = random_int(3, 8);
for (var i = 0; i &lt; numSpots; i++) {
    //Select random start spot
    var spotX = random_int(0, tilesX - 1);
    var spotY = random_int(0, tilesY - 1);
    var spotMeta = random_int(0, sprite_get_number(spr_D3_Stone) - 1);
    
    //Step random amount of times
    var numSteps = random_int(3, 8);
    for (var j = 0; j &lt; numSteps; j++) {
        //Place block, if you can
        if (spotX &gt;= 0 &amp;&amp; spotX &lt; tilesX) {
            if (spotY &gt;= 0 &amp;&amp; spotY &lt; tilesY) {
                blocks[# spotX, spotY] = spr_D3_Stone;
                meta[# spotX, spotY] = spotMeta;
            }
        }
        
        //Move random dir
        spotX += choose(-1, 0, 1);
        spotY += choose(-1, 0, 1);
    }
}

//Place random paths
var numSpots = random_int(1, 3);
for (var i = 0; i &lt; numSpots; i++) {
    //Select random start spot
    var spotX = random_int(0, tilesX - 1);
    var spotY = random_int(0, tilesY - 1);
    var spotMeta = random_int(0, sprite_get_number(spr_D3_Path) - 1);
    
    //Step random amount of times
    var numSteps = random_int(10, 20);
    for (var j = 0; j &lt; numSteps; j++) {
        //Place block, if you can
        if (spotX &gt;= 0 &amp;&amp; spotX &lt; tilesX) {
            if (spotY &gt;= 0 &amp;&amp; spotY &lt; tilesY) {
                blocks[# spotX, spotY] = spr_D3_Path;
                meta[# spotX, spotY] = spotMeta;
            }
        }
        
        //Move random dir
        spotX += choose(-1, 0, 1);
        spotY += choose(-1, 0, 1);
    }
}

//Place random obsidian walls spots
var numSpots = random_int(2, 4);
for (var i = 0; i &lt; numSpots; i++) {
    //Select random start spot
    var spotX = random_int(0, tilesX - 1);
    var spotY = random_int(0, tilesY - 1);
    
    //Step random amount of times
    var numSteps = random_int(2, 4);
    for (var j = 0; j &lt; numSteps; j++) {
        //Place block, if you can
        if (spotX &gt;= 0 &amp;&amp; spotX &lt; tilesX) {
            if (spotY &gt;= 0 &amp;&amp; spotY &lt; tilesY) {
                blocks[# spotX, spotY] = spr_D3_Obsidian;
            }
        }
        
        //Move random dir
        spotX += choose(-1, 0, 1);
        spotY += choose(-1, 0, 1);
    }
}

//Place kristian
while (true) {
    //Select random start spot
    var spotX = random_int(0, tilesX - 1);
    var spotY = random_int(0, tilesY - 1);
    
    //Check if safe spot to spawn
    var safeSpot = true;
    for (var yy = -1; yy &lt;= 1; yy++) {
        var checkY = spotY + yy;
        for (var xx = -1; xx &lt;= 1; xx++) {
            var checkX = spotX + xx;
            
            //Check if valid grid
            if (checkX &gt;= 0 &amp;&amp; checkX &lt; tilesX) {
                if (checkY &gt;= 0 &amp;&amp; checkY &lt; tilesY) {
                    //Check if not safe way
                    if (blocks[# checkX, checkY] == spr_D3_Obsidian) {
                        //Not safe to spawn next to obsidian
                        safeSpot = false;
                        break;
                    }
                }
            }
        }
        
        if (!safeSpot) { break; }
    }

    //Spawn player
    if (safeSpot) {
        var worldX = (gridSize * spotX) + (gridSize / 2);
        var worldY = (gridSize * (spotY + 1)) + (gridSize / 2);
        instance_create(worldX, worldY, D3_Kristian);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for game done
if (gameDone) {
    if (!Dialog.active) {
        room_goto(rom_Calendar);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw world
for (var yy = 0; yy &lt; tilesY; yy++) {
    var blockY = gridSize * (yy + 1);
    
    for (var xx = 0; xx &lt; tilesX; xx++) {
        var blockX = gridSize * xx;
        var blockId = (yy * tilesX) + xx;
        var block = blocks[# xx, yy];
        var blockMeta = meta[# xx, yy];
        
        //Draw special tile
        if (block != noone) {
            draw_sprite(block, blockMeta, blockX, blockY);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw tnt count

//Calculate position
var cx = room_width / 2;
var cLine = room_height - gridSize;
var iconScale = 1.25;
var iconW = sprite_get_width(spr_D3_TNT) * iconScale;
draw_set_font(fnt_Arial_Gigantic);
var countText = " x " + string(tnts);
var countW = string_width(countText);
var totalW = iconW + countW;

//Draw icon
var iconX = cx - (totalW / 2);
var iconY = cLine - (sprite_get_height(spr_D3_TNT) / 2) - (gridSize / 2);
draw_sprite_ext(spr_D3_TNT, 0, iconX, iconY, iconScale, iconScale, 0, c_white, 1);

//Draw count
var countX = iconX + iconW;
var countY = cLine - (gridSize / 2);
draw_set_colour(c_white);
draw_set_valign(fa_middle);
draw_text(countX, countY, countText);
draw_set_valign(fa_top);

//Draw progress
var progress = 100 - ceil((blocksAlive / blocksTotal) * 100);
var progText = string(progress) + "% sprengt";
var progX = cx;
var progY = cLine + (gridSize / 2);
draw_set_font(fnt_Arial_Medium);
draw_set_colour(c_red);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(progX, progY, progText);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
