<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
clips = 0;
memory = 128;

camX = 0;
camY = 0;
camRec = false;
camRange = 256;

fov = 60;
xLeft = 0;
yLeft = 0;
xRight = 0;
yRight = 0;

skipPre = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events

//Update camera
if (instance_exists(D5_Stig)) {
    //Show camera
    if (!mouse_check_button(mb_right)) {
        //Move camera
        camX = mouse_x;
        camY = mouse_y;
        camDir = 0;
    }
    else {
        //Rotate camera
        camDir = point_direction(camX, camY, mouse_x, mouse_y);
        var leftDir = camDir - (fov / 2);
        var rightDir = camDir + (fov / 2);
        xLeft = camX + lengthdir_x(camRange, leftDir);
        yLeft = camY + lengthdir_y(camRange, leftDir);
        xRight = camX + lengthdir_x(camRange, rightDir);
        yRight = camY + lengthdir_y(camRange, rightDir);
    
        if (mouse_check_button(mb_left) &amp;&amp; !Dialog.active) {
            //Recording
            D5_Stig.inCamera = point_in_triangle(D5_Stig.x, D5_Stig.y, camX, camY, xLeft, yLeft, xRight, yRight);
            
            //Drain memory
            memory -= (4 / room_speed);
            camRec = true;
            if (memory &lt;= 0) {
                //Lost
                memory = 0;
                gameDone = true;
                dialog_show("Fail");
                with (D5_Stig) {
                    path_speed = 0;
                }
            }
        }
    }
    
    //Check if stopped recording
    if (mouse_check_button_released(mb_left)) {
        camRec = false;
    }
}

//Game logic
if (!Dialog.active) {
    //Check if done
    if (gameDone) {
        room_goto(rom_Calendar);
    }
    
    //Check if won
    if (clips == 4 &amp;&amp; !gameDone) {
        gameDone = true;
        dialog_show("Win");
    }
    
    if (!instance_exists(D5_Stig)) {
        if (clips == 4) {
            //Win
            dialog_show("Win");
        }
        else {
            //Try again, or next
            var stig = instance_create(0, 0, D5_Stig);
            if (skipPre) { stig.skipPre = true; skipPre = false; }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw camera
if (instance_exists(D5_Stig)) {
    //Get camera rec
    var col = c_white;
    var coneColor = c_yellow;
    if (camRec) {
        col = c_red;
        coneColor = c_red;
    }
    
    //Get camera direction
    var dir = 0;
    if (mouse_check_button(mb_right)) {
        dir = camDir;
        
        //Draw hit cone
        draw_set_alpha(0.25);
        draw_set_colour(coneColor);
        draw_triangle(camX, camY, xLeft, yLeft, xRight, yRight, false);
        draw_set_alpha(1);
    }
    
    //Draw camera
    draw_sprite_ext(spr_D5_Camera, 0, camX, camY, 1, 1, dir, col, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw clips &amp; memory
//Calculate position
var infoX = (room_width / 2) + (64 * 5);
var clipY = room_height - (64 * 3);
var memY = clipY + 64;

//Draw
draw_set_font(fnt_Arial_Big);
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(infoX, clipY, "Filmklipp: " + string(clips) + " / 4");

draw_set_colour(c_red);
draw_text(infoX, memY, "#Lagringsplass: " + string(memory) + " MB");
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
