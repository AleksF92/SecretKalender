<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
itemCorrectId = noone;
itemChoices = ds_list_create();
numChoices = 4;
gameDone = false;
itemScore = 0;
itemCount = sprite_get_number(spr_D15_Items);
posSplit = 1 / numChoices;
posMove = posSplit / 2;

//Create item list
itemList = ds_list_create();
itemTexts = ds_list_create();
for (var i = 0; i &lt; itemCount; i++) {
    //Add item image
    ds_list_add(itemList, i);
    
    //Add item text
    var itemStr = "";
    switch (i) {
        case 0: { itemStr = "Spaghetti"; break; }
        case 1: { itemStr = "Hamburger"; break; }
        case 2: { itemStr = "Salat"; break; }
        case 3: { itemStr = "Kyllingl√•r"; break; }
        case 4: { itemStr = "Ris"; break; }
        case 5: { itemStr = "Pizza"; break; }
    }
    ds_list_add(itemTexts, itemStr);
}

//Create item choices
for (var i = 0; i &lt; numChoices; i++) {
    var choice = instance_create(0, 0, D15_Choice);
    choice.path_position = (posSplit * i) + 0.001; //0.06125;
}

scr_music(bgm_D15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New round delay
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
if (!Dialog.active &amp;&amp; !alarm[0]) {
    if (gameDone) {
        room = rom_Calendar;
    }
    else {
        var itemsLeft = ds_list_size(itemList);
        if (itemsLeft &gt; 0) {
            //Select random new item to request
            itemCorrectId = random_int(0, itemsLeft - 1);
            var correctText = itemTexts[| itemCorrectId];
            dialog_show_custom(string_numbercode(correctText));
            
            //Select random choices
            ds_list_clear(itemChoices);
            for (var i = 0; i &lt; numChoices; i++) {
                var randItem = noone;
                while (randItem == noone) {
                    //Select random item
                    randItem = random_int(0, itemCount - 1);
                    
                    //Check if already exists
                    for (var j = 0; j &lt; ds_list_size(itemChoices); j++) {
                        if (randItem == itemChoices[| j]) {
                            randItem = noone;
                            break;
                        }
                    }
                    
                    //Check if more than one correct
                    if (randItem == itemList[| itemCorrectId]) { randItem = noone; }
                }
                
                //Store
                ds_list_add(itemChoices, randItem);
                var choice = instance_find(D15_Choice, i);
                choice.image_index = randItem;
                choice.visible = true;
                var newPos = choice.path_position + posMove;
                if (newPos &gt; 1) { newPos -= 1; }
                choice.path_position = newPos;
            }
            
            //Put correct in random spot
            var randChoiceId = random_int(0, numChoices - 1);
            itemChoices[| randChoiceId] = itemList[| itemCorrectId];
            var choice = instance_find(D15_Choice, randChoiceId);
            choice.image_index = itemList[| itemCorrectId];
        }
        else {
            //Finished
            gameDone = true;
            if (itemScore &gt;= itemCount - 1) { dialog_show("Win"); }
            else { dialog_show("Fail"); }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw info
var choiceNum = itemCount - ds_list_size(itemList);
if (choiceNum &gt; 0) {
    draw_set_font(fnt_Arial_Small);
    draw_set_colour(c_white);
    draw_text(room_width / 2, 16,
        "Matretter valgt: " + string(choiceNum) + " / " + string(itemCount)
        + "#Score: " + string(itemScore)
    );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
