<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_D4_Zombie</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
swapDelay = room_speed;
image_speed = (1 / room_speed) * 3;
moveSpeed = 0;
moveGain = 0.1;
spawnDelay = room_speed;
alarm[2] = spawnDelay;
image_yscale = 0;
alpha = 0;
targetY = room_height - (64 * 1);
baseScale = 1;
targetScale = 3;
minSpawnY = 64 * 3;
maxSpawnY = 64 * 6;
targetDistMax = targetY - minSpawnY;
dir = choose(1, -1);
inTarget = false;

y = random_int(minSpawnY, maxSpawnY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawned
alarm[0] = swapDelay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swap direction
dir *= -1;
moveGain *= -1;
alarm[0] = swapDelay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swap speed gain
moveGain *= -1;
alarm[1] = swapDelay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply movement

//Calculate scale
var targetDist = distance_to_point(x, targetY);
distScale = (targetScale - baseScale) * (1 - (targetDist / targetDistMax));
image_xscale = (baseScale + distScale) * dir;

//Calculate visiblity
alpha = 1 - (distance_to_point(mouse_x, mouse_y) * 0.01);
if (alpha &lt; 0) { alpha = 0; }

//State
if (alarm[2]) {
    //Rise
    image_yscale += (baseScale + distScale) / spawnDelay;
}
else {
    //Move
    moveSpeed += moveGain;
    x += (moveSpeed * dir);
    y += (moveSpeed * 0.3);
    
    if (y &gt;= targetY &amp;&amp; !D4_CallOfLarsen.gameDone) {
        //Fail
        dialog_show("Fail");
        D4_CallOfLarsen.gameDone = true;
        instance_deactivate_object(D4_Zombie);
    }
    
    //Check if targetted
    var totWidth = (sprite_width * image_xscale);
    var hitAreaX = totWidth * 0.5;
    var x1 = x - (hitAreaX / 2);
    
    var totHeight = sprite_height * image_yscale;
    var hitAreaY = totHeight * 0.5;
    var y1 = y - hitAreaY;
    
    inTarget = false;
    if (mouse_x &gt;= x1 &amp;&amp; mouse_x &lt;= x1 + hitAreaX) {
        if (mouse_y &gt;= y1 &amp;&amp; mouse_y &lt;= y1 + hitAreaY) {
            inTarget = true;
            if (mouse_check_button_pressed(mb_left)) {
                //Kill
                D4_CallOfLarsen.kills++;
                scr_sound(snd_D4_Shot);
                scr_sound(snd_D4_Zombie_Die);
                    
                if (D4_CallOfLarsen.kills &gt;= 20) {
                    dialog_show("Win");
                    D4_CallOfLarsen.gameDone = true;
                    instance_deactivate_object(D4_Zombie);
                }
                else {
                    instance_destroy();
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw target
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, 0, c_white, alpha);

if (inTarget) {
    draw_sprite(spr_D4_Target, 0, mouse_x, mouse_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
