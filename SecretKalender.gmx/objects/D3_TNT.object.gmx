<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_D3_TNT</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
blockX = 0;
blockY = 0;
boomDelay = room_speed * 2;
alarm[0] = boomDelay;
audio_play_sound(snd_D3_TNT, 0, false);
blastDist = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explode

//Create boom
var cx = x + (sprite_width / 2);
var cy = y + (sprite_height / 2);
instance_create(cx, cy, D3_Boom);

//Calculate damage
for (var yy = -blastDist; yy &lt;= blastDist; yy++) {
    for (var xx = -blastDist; xx &lt;= blastDist; xx++) {
        var destX = blockX + xx;
        var destY = blockY + yy;
        if (destX &gt;= 0 &amp;&amp; destX &lt; D3_MadKristian.tilesX) {
            if (destY &gt;= 0 &amp;&amp; destY &lt; D3_MadKristian.tilesY) {
                //Check damage to blocks
                var destBlock = D3_MadKristian.blocks[# destX, destY];
                var distToBoom = max(yy, -yy) + max(xx, -xx);
                var boomPower = (blastDist + 1) - distToBoom;
                if ((boomPower == 1 &amp;&amp; destBlock &lt;= spr_D3_Earth)
                || (boomPower == 2 &amp;&amp; destBlock &lt;= spr_D3_Path)
                || (boomPower &gt;= 3 &amp;&amp; destBlock &lt;= spr_D3_Stone)) {
                    //Destroy block
                    D3_MadKristian.blocks[# destX, destY] = noone;
                }
                
                //Check damage to player
                if (boomPower &gt; 0) {
                    if (destX == D3_Kristian.blockX &amp;&amp; destY == D3_Kristian.blockY) {
                        D3_Kristian.hp -= 25 * boomPower;
                        if (D3_Kristian.hp &lt;= 0) {
                            //Died
                            D3_Kristian.hp = 0;
                            
                            dialog_show("Fail Dead");
                            D3_MadKristian.gameDone = true;
                        }
                    }
                }
            }
        }
    }
}

//Check amount of remaining blocks
D3_MadKristian.blocksAlive = 0;
for (var yy = 0; yy &lt; D3_MadKristian.tilesY; yy++) {
    for (var xx = 0; xx &lt; D3_MadKristian.tilesX; xx++) {
        //If countable block
        if (D3_MadKristian.blocks[# xx, yy] != noone) {
            D3_MadKristian.blocksAlive++;
        }
    }
}

if (D3_Kristian.hp &gt; 0) {
    //Check if out of blocks
    if (D3_MadKristian.tnts == 0) {
        dialog_show("Fail Blocks");
        D3_MadKristian.gameDone = true;
    }
}

//Check if won
if (D3_MadKristian.blocksAlive &lt;= D3_MadKristian.blocksTotal * 0.2) {
    dialog_show("Win");
    D3_MadKristian.gameDone = true;
    
    if (D3_Kristian.hp == 0) {
        dialog_show("Win Dead");
    }
}
    
//Destroy block
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw charge
var chargeCol = c_white;
var progress = (alarm[0] / boomDelay) * 2;
if (progress &lt; 1) {
    chargeCol = make_colour_rgb(255, 255 * progress, 255 * progress);
}

//Draw charged sprite
draw_sprite_ext(sprite_index, 0, x, y, 1, 1, 0, chargeCol, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
