<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_D10_Server</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
right = 0;
up = 0;
left = 0;
down = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scan internet

//Reset connections
with (D10_Cable) { online = false; }

//Search for connected cable
var node = id;
var lastNode = noone;
while (node != noone) {
    //Flag as online
    if (node != id) { node.online = true; }
    
    //Find surrounding cable
    var r = collision_point(node.x + (64 * node.right), node.y, D10_Cable, false, true);
    var u = collision_point(node.x, node.y - (64 * node.up), D10_Cable, false, true);
    var l = collision_point(node.x - (64 * node.left), node.y, D10_Cable, false, true);
    var d = collision_point(node.x, node.y + (64 * node.down), D10_Cable, false, true);
    var h = collision_point(node.x, node.y - (64 * node.up), D10_House, false, true);
    
    //Clear self ref.
    if (r == node) { r = noone; }
    if (u == node) { u = noone; }
    if (l == node) { l = noone; }
    if (d == node) { d = noone; }

    //Check for connection
    var tmpNode = node;
    if (r != noone &amp;&amp; r != lastNode) {
        if (r.left) { lastNode = node; node = r; }
    }
    else if (u != noone &amp;&amp; u != lastNode) {
        if (u.down) { lastNode = node; node = u; }
    }
    else if (l != noone &amp;&amp; l != lastNode) {
        if (l.right) { lastNode = node; node = l; }
    }
    else if (d != noone &amp;&amp; d != lastNode) {
        if (d.up) { lastNode = node; node = d; }
    }
    else if (h != noone) {
        //Fiber is at house
        D10_House.online = true;
        D10_House.alarm[0] = 1;
        dialog_show("Win");
    }
    
    if (node == tmpNode) { node = noone; }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
