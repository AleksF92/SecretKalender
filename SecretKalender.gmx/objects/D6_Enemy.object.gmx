<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_D6_Enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
image_speed = 0;
level = 1;
xpYield = 0;
hpMax = 0;
hp = 0;
damage = 0;
isBoss = false;
alarm[0] = 1;
alarm[1] = random_int(room_speed * 0.5, room_speed * 2);

dir = -1;
moveSpeed = 0;
idleDelayMin = room_speed * 0.5;
idleDelayMax = room_speed * 3;
walkDelayMin = room_speed * 0.2;
walkDelayMax = room_speed * 2;
alarm[3] = random_int(idleDelayMin, idleDelayMax);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to map
D6_Aleks.combat = false;
background_visible[0] = true;
D6_Aleks.hp = D6_Aleks.hpMax;

with (D6_ActionPoint) {
    //Show point
    visible = true;
    if (selected) {
        D6_Aleks.x = x;
        D6_Aleks.y = y;
        
        if (!D6_Aleks.dead) {
            won = true;
            if (pointId == 10) {
                dialog_show("Win");
            }
        }
    }
    
    //Update point req
    alarm[1] = 1;
}

D6_Aleks.dead = false;
instance_deactivate_object(D6_Sword);
instance_deactivate_object(D6_Enemy);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Idle duration
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take damage cd
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate stats
xpYield = 25 * level;
hpMax = 4 * level;
hp = hpMax;
damage = level;

if (isBoss) {
    xpYield *= 4;
    hpMax *= 4;
    hp = hpMax;
}

alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
if (hpMax &gt; 0 &amp;&amp; !alarm[4] &amp;&amp; !Dialog.active) {
    var returnToMap = false;
    
    if (hp &gt; 0) {
        if (!alarm[1]) {
            //Attack
            if (distance_to_object(D6_Aleks) &lt;= 52 &amp;&amp; !D6_Aleks.alarm[0]) {
                D6_Aleks.alarm[0] = room_speed;
                D6_Aleks.hp -= damage;
                if (D6_Aleks.hp &lt;= 0) {
                    //Dead
                    D6_Aleks.dead = true;
                    D6_Aleks.hp = 0;
                    D6_Aleks.xLives--;
                    if (D6_Aleks.xLives &lt; 0) {
                        //Loose
                        D6_Aleks.gameDone = true;
                        dialog_show("Fail");
                        scr_sound(snd_D6_GameOver);
                    }
                    
                    instance_deactivate_object(D6_Sword);
                    returnToMap = true;
                }
            }
            alarm[1] = room_speed;
        }
        
        //Gravity
        y += 12;
        var groundY = room_height - (64 * 2);
        if (y &gt; groundY) { y = groundY; }
        
        //Move
        if (!alarm[3]) {
            if (!moveSpeed) {
                //Start moving
                alarm[3] = random_int(walkDelayMin, walkDelayMax);
                dir = choose(1, -1);
                if (x &gt; room_width - 64) { dir = -1; }
                else if (x &lt; 64) { dir = 1; }
                moveSpeed = random_int(1, 3);
            }
            else {
                //Stop moving
                moveSpeed = 0;
                alarm[3] = random_int(idleDelayMin, idleDelayMax);
            }

        }
        else {
            if (moveSpeed) {
                //Moving
                x += (moveSpeed * dir);
                if ((x &gt; room_width - 64) || (x &lt; 64)) { dir *= -1; }
            }
            else {
                //Idle
            }
        }
    }
    else {
        hp = 0;
        switch(other.image_index) {
            case 0: { scr_sound(snd_D6_Enemy1); break; }
            case 1: { scr_sound(snd_D6_Enemy2); break; }
            case 2: { scr_sound(snd_D6_Enemy3); break; }
            case 3: { scr_sound(snd_D6_Enemy4); break; }
            case 4: { scr_sound(snd_D6_Enemy5); break; }
            case 5: { scr_sound(snd_D6_Enemy6); break; }
            case 6: { scr_sound(snd_D6_Enemy7); break; }
            case 7: { scr_sound(snd_D6_Enemy8); break; }
            case 8: { scr_sound(snd_D6_Enemy9); break; }
            case 9: { scr_sound(snd_D6_Enemy10); break; }
        }
        
        //Gain experience
        D6_Aleks.xp += xpYield;
        if (D6_Aleks.xp &gt;= D6_Aleks.xpMax) {
            //Level up
            D6_Aleks.level++;
            D6_Aleks.xp -= D6_Aleks.xpMax;
            D6_Aleks.xpMax = floor(D6_Aleks.xpMax * D6_Aleks.xpMod);
            D6_Aleks.hpMax = 4 * D6_Aleks.level;
            D6_Aleks.hp = D6_Aleks.hpMax;
            
            //Update sword
            instance_deactivate_object(D6_Sword);
            var sword = instance_create(0, 0, D6_Sword);
            
            scr_sound(snd_D6_LevelUp);
        }
        
        //Die
        if (instance_number(D6_Enemy) &gt; 1) {
            instance_destroy();
        }
        else {
            //Win
            returnToMap = true;
        }
    }
    
    if (returnToMap) {
        alarm[4] = room_speed;
        visible = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw hp
if (hpMax &gt; 0) {
    var headY = 0;
    switch(image_index) {
        case 0: { headY = sprite_height * 0.5; break; }
        case 1: { headY = sprite_height * 1; break; }
        case 2: { headY = sprite_height * 0.75; break; }
        case 3: { headY = sprite_height * 1; break; }
        case 4: { headY = sprite_height * 1; break; }
        case 5: { headY = sprite_height * 0.6; break; }
        case 6: { headY = sprite_height * 1; break; }
        case 7: { headY = sprite_height * 0.9; break; }
        case 8: { headY = sprite_height * 1; break; }
        case 9: { headY = sprite_height * 0.9; break; }
    }

    //Draw hp frame
    var hpw = 64;
    var hpx1 = x - (hpw / 2);
    var hpy1 = y - headY - 16;
    var hpy2 = hpy1 + 8;
    draw_set_colour(c_white);
    draw_rectangle(hpx1, hpy1, hpx1 + hpw, hpy2, false);
    
    //Draw hp progress
    var progress = hp / hpMax;
    draw_set_colour(c_red);
    draw_rectangle(hpx1, hpy1, hpx1 + (hpw * progress), hpy2, false);
    
    //Draw hp text
    draw_set_font(fnt_Arial_Small);
    draw_set_colour(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(x, hpy1 - 16, string(hp) + " / " + string(hpMax));
    var isBoss = "";
    if (image_index == 4 || image_index == 9) { isBoss = " (Boss)"; }
    draw_text(x, hpy1 - 32, "Nivå: " + string(level) + isBoss);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw with dir
draw_sprite_ext(sprite_index, image_index, x, y, dir, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
